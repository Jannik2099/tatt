tatt stands for "tatt (is an) arch testing tool"

Dependencies:
app-portage/eix    (for finding useflag combis)
app-portage/gentoolkit (for equery)
www-client/pybugz  (for quering bugs )
dev-python/configobj 

Introduction

Arch testing includes many boring tasks. While gatt is intended to handle things that you do as a developer, like
closing the bug and the actual keywording, tatt focusses on the testing. 

Tatt is configured through the file ~/.tatt. An example is given in dot-tatt-example, the spec is in
dot-tatt-spec

 Usage Examples:

Work on a stable bug no 300000. This will unmask the package and create two shell scripts for automated testing of
useflag combis and rdeps and success-reports to bugzilla.

./tatt.py -b300000


To run individual parts of the full procedure use the following syntax:

-) Everything was successful, we want to comment on the bug. The following command will log in and write the comment
"Tested on x86: Everything fine" to the bug.

./tatt.py -s300000

-) Print emerge commands for the stable rdeps of eix:

./tatt.py -d app-portage/eix

-) Print emerge commands for <=16 use flag combinations of eix:

./tatt.py -u app-portage/eix


####### ~/.tatt ############
# Here we show the possible options together with their default values

# Regular expression to identify a portage atom
# atom-regexp='=?[^\s:,;<>]+/\S+-[0-9]?\S+[0-9][^\s:,;<>]?[a-z]*'

# Message for the success script
# successmessage='Archtested on x86: Everything fine'

# ignoreprefix contains a list of use flag prefixes to be ignored 
# ignoreprefix="elibc_","video_cards_","linguas_","kdeenablefinal","test","debug"
